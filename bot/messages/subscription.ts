import { PrismaLuna } from ".."
import { Events } from "../constants"
import { InlineKeyboard, type Context } from "grammy"

export const sendSubscriptionMessage = async (ctx: Context, replaceMessageId?: number) => {
	const keyboard = new InlineKeyboard()
		.text("‚≠ê –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (–Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ) ‚≠ê", Events.my_devices)
		.row()
		.text("‚≠ê –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (–Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ) ‚≠ê", Events.my_devices)
		.row()
		.text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†", Events.start)
		.text("üõ†Ô∏è –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é üõ†Ô∏è", Events.help)

	const user = await PrismaLuna.user.findFirst({ where: { id: ctx.chat!.id.toString() } })
	const activeSubscriptions = await PrismaLuna.subscription.findMany({
		where: {
			userID: user?.id,
		},
	})

	let message

	if (activeSubscriptions.length === 0) {
		message = `–£ –í–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ ü•∫\n`
	} else {
		message = activeSubscriptions
	}

	if (replaceMessageId) {
		await ctx.api.editMessageText(
			ctx.chat!.id,
			replaceMessageId,
			`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ lunavpn, ${user?.name || "–∞–Ω–æ–Ω–∏–º :)"}!\n\n${message}`,
			{
				reply_markup: keyboard,
			},
		)
		return {
			message_id: replaceMessageId,
		}
	}

	return await ctx.reply(
		`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ lunavpn, ${user?.name || "–∞–Ω–æ–Ω–∏–º :)"}!\n\n${message}`,
		{
			reply_markup: keyboard,
		},
	)
}
