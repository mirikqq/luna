import { PrismaLuna } from ".."
import { Events } from "../constants"
import { InlineKeyboard, type Context } from "grammy"

export const sendSubscriptionMessage = async (ctx: Context, replaceMessageId?: number) => {
	const keyboard = new InlineKeyboard()

	const user = await PrismaLuna.user.findFirst({ where: { id: ctx.chat!.id.toString() } })
	const activeSubscriptions = await PrismaLuna.subscription.findMany({
		where: {
			userID: user?.id,
		},
	})

	let message

	if (activeSubscriptions.length === 0) {
		message = `–£ –í–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ ü•∫\n`
	} else {
		message = activeSubscriptions
			.map((subscription) => {
				const day = String(subscription.active_up_to!.getDate()).padStart(2, "0")
				const month = String(subscription.active_up_to!.getMonth() + 1).padStart(2, "0")
				const year = subscription.active_up_to!.getFullYear()

				keyboard.text(`üöÄ –ü–æ–¥–ø–∏—Å–∫–∞ #${subscription.id} üöÄ`).row()

				return `<em>–ü–æ–¥–ø–∏—Å–∫–∞ #${subscription.id} | –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ ${day}.${month}.${year}</em>`
			})
			.join("\n")
	}

	keyboard
		.text("‚≠ê –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (–Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ) ‚≠ê", Events.my_devices)
		.row()
		.text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†", Events.start)
		.row()

	if (replaceMessageId) {
		await ctx.api.editMessageText(
			ctx.chat!.id,
			replaceMessageId,
			`<strong>–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:</strong>\n${message}\n\n–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ –µ–µ —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞`,
			{
				reply_markup: keyboard,
				parse_mode: "HTML",
			},
		)
		return {
			message_id: replaceMessageId,
		}
	}

	return await ctx.reply(`${message}`, {
		reply_markup: keyboard,
	})
}
