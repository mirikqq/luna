import { PrismaLuna } from ".."
import { Events } from "../constants"
import { InlineKeyboard, type Context } from "grammy"

export const sendMenuMessage = async (ctx: Context, replaceMessageId?: number) => {
	const keyboard = new InlineKeyboard()
		.text("‚≠ê –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏ ‚≠ê", Events.my_devices)
		.row()
		.text("ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ ü§ù", Events.referal)
		.text("üí¨ –ü–æ–º–æ—â—å üí¨", Events.help)

	const user = await PrismaLuna.user.findFirst({ where: { id: ctx.chat!.id.toString() } })
	const activeSubscriptions = await PrismaLuna.subscription.findMany({
		where: {
			userID: user?.id,
		},
	})

	let message

	if (activeSubscriptions.length === 0) {
		message = `–£ –í–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ ü•∫`
	} else {
		message = `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ ${activeSubscriptions.length} - –ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ "–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏"`
	}

	const newSubscritption = `–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ "–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏"`

	const referalMessage = "–ü—Ä–∏–≤–æ–¥–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –¥–Ω–∏ –Ω–∞ –í–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É!"

	if (replaceMessageId) {
		try {
			await ctx.api.editMessageText(
				ctx.chat!.id,
				replaceMessageId,
				`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ lunavpn, ${
					user?.name || "–∞–Ω–æ–Ω–∏–º :)"
				}!\n\n${message}\n\n${newSubscritption}\n\n${referalMessage}`,
				{
					reply_markup: keyboard,
				},
			)
		} catch (e) {
			await ctx.reply(
				`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ lunavpn, ${
					user?.name || "–∞–Ω–æ–Ω–∏–º :)"
				}!\n\n${message}\n\n${newSubscritption}\n\n${referalMessage}`,
				{
					reply_markup: keyboard,
				},
			)
		}
		return {
			message_id: replaceMessageId,
		}
	}

	return await ctx.reply(
		`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ lunavpn, ${
			user?.name || "–∞–Ω–æ–Ω–∏–º :)"
		}!\n\n${message}\n\n${newSubscritption}\n\n${referalMessage}`,
		{
			reply_markup: keyboard,
		},
	)
}
