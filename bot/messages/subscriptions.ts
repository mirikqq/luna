import { PrismaLuna } from ".."
import { Events } from "../constants"
import { InlineKeyboard, type Context } from "grammy"

export const sendSubscriptionsMessage = async (ctx: Context, replaceMessageId?: number) => {
	const keyboard = new InlineKeyboard()

	const user = await PrismaLuna.user.findFirst({ where: { id: ctx.chat!.id.toString() } })
	const activeSubscriptions = await PrismaLuna.subscription.findMany({
		where: {
			userID: user?.id,
		},
	})

	let message

	if (activeSubscriptions.length === 0) {
		message = `–£ –í–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ ü•∫`
	} else {
		message = activeSubscriptions.map((subscription) => {
			if (subscription.active_up_to === null) return `–£ –í–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫`
			const day = String(subscription.active_up_to!.getDate()).padStart(2, "0")
			const month = String(subscription.active_up_to!.getMonth() + 1).padStart(2, "0")
			const year = subscription.active_up_to!.getFullYear()

			keyboard
				.text(
					`üöÄ –ü–æ–¥–ø–∏—Å–∫–∞ #${subscription.id.split("-")[0]} - ${subscription.device} üöÄ`,
					`subscription=${subscription.id}`,
				)
				.row()

			return `<em>–ü–æ–¥–ø–∏—Å–∫–∞ #${
				subscription.id.split("-")[0]
			} | –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ ${day}.${month}.${year}</em> | ${subscription.device}\n`
		})
	}

	keyboard
		.text("‚≠ê –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (–Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ) ‚≠ê", Events.add_device)
		.row()
		.text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†", Events.start)
		.row()

	const subscriptionManage =
		activeSubscriptions.length > 0
			? "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ –µ–µ —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞\n\n–í–∞—à–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:"
			: ""

	if (replaceMessageId) {
		try {
			await ctx.api.editMessageText(
				ctx.chat!.id,
				replaceMessageId,
				`<strong>–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:</strong>\n${message}\n${subscriptionManage}`,
				{
					reply_markup: keyboard,
					parse_mode: "HTML",
				},
			)
		} catch (e) {
			await ctx.reply(`<strong>–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:</strong>\n${message}\n${subscriptionManage}`, {
				reply_markup: keyboard,
			})
		}
		return {
			message_id: replaceMessageId,
		}
	}

	return await ctx.reply(`<strong>–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:</strong>\n${message}\n${subscriptionManage}`, {
		reply_markup: keyboard,
	})
}
